// +HC -------------------------------------------------
// File : dut.v
// Module : lfu_algorithm
// Function : LFU algorithm
// ------------------------------------------------------
// History: 
// Version Date Author Description
// v1.0 23.April.2018 Van Le Original
// ------------------------------------------------------
// (C) Copyright 2004 Renesas Technology Corp. All rights reserved.
// -HC --------------------------------------------------

module lfu_algorithm (clk, rst_n, new_buf_req, ref_buf_numbr, buf_num_replc) ;

// Parameter constant
parameter REFNUM = 1 ;
parameter ACCSTR = 7 ;
parameter INTL_DELAY = 1 ; 

// Port definition
input clk ;
input rst_n ;
input new_buf_req ;
input [REFNUM:0] ref_buf_numbr ;
output [REFNUM:0] buf_num_replc ;

wire clk ;
wire rst_n ;
wire new_buf_req ;
wire [REFNUM:0] ref_buf_numbr ;
wire [REFNUM:0] buf_num_replc ;

// Signal definition 
reg [ACCSTR:0] next_access_time ;
reg [REFNUM:0] min_id ;
reg [REFNUM:0] next_replc ;
reg [REFNUM:0] mux_1 ;
reg [REFNUM:0] mux_2 ;
reg [REFNUM:0] mux_3 ;
reg [REFNUM:0] mux_4 ;
reg [ACCSTR:0] access_time_replc ;
reg [ACCSTR:0] access_time_ref ;
reg [REFNUM:0] buf_replc;
reg [ACCSTR:0] access_time ;


// Access_time control logic
always @(new_buf_req or 
min_id[REFNUM:0] or 
access_time[ACCSTR:0] or 
ref_buf_numbr[REFNUM:0]) begin

// when new_buf_req happen
case (min_id[REFNUM:0])
2'b00: begin
access_time_replc[ACCSTR:0] = {access_time[ACCSTR:2],{2'b01}} ;
end
2'b01: begin
access_time_replc[ACCSTR:0] = 
  {access_time[ACCSTR:4],{2'b01},access_time[REFNUM:0]} ;
end
2'b10: begin
access_time_replc[ACCSTR:0] =
  {access_time[ACCSTR:6],{2'b01},access_time[3:0]} ;
end
2'b11: begin
access_time_replc[ACCSTR:0] = {{2'b01},access_time[5:0]} ;
end
default: begin
access_time_replc[ACCSTR:0] = access_time[7:0] ;
end
endcase

// when 4 buffers reach max
if (access_time[ACCSTR:0] == 8'b11_11_11_11) begin
case (ref_buf_numbr[REFNUM:0])
2'b00: begin
access_time_ref[ACCSTR:0] = 8'b01_01_01_10 ;
end
2'b01: begin
access_time_ref[ACCSTR:0] = 8'b01_01_10_01 ;
end
2'b10: begin
access_time_ref[ACCSTR:0] = 8'b01_10_01_01 ;
end
2'b11 : begin
access_time_ref[ACCSTR:0] = 8'b10_01_01_01 ;
end
default : begin
access_time_ref[ACCSTR:0] = access_time[7:0] ;
end
endcase
end

// when 4 buffers don't reach max
else begin
case (ref_buf_numbr[REFNUM:0])
2'b00: begin
access_time_ref[ACCSTR:0] = {access_time[ACCSTR:2],{1'b1},access_time[REFNUM]};
end
2'b01: begin
access_time_ref[ACCSTR:0] =
 {access_time[ACCSTR:4],{1'b1},access_time[3],access_time[REFNUM:0]};
end
2'b10: begin
access_time_ref[ACCSTR:0] =
 {access_time[ACCSTR:6],{1'b1},access_time[5],access_time[3:0]} ;
end
2'b11: begin
access_time_ref[ACCSTR:0] = {{1'b1},access_time[ACCSTR],access_time[5:0]};
end
default: begin
access_time_ref[ACCSTR:0] = access_time[7:0] ;
end
endcase
end

// next_access_time final calculate
next_access_time[ACCSTR:0] = (new_buf_req) ? access_time_replc:access_time_ref;
end

// Flipflop output for access_time control logic
always @(posedge clk or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        access_time <= #INTL_DELAY 8'b01_01_01_01 ;
    end
    else begin
        access_time <= #INTL_DELAY next_access_time ;
    end
end

// Find min_id logic
always @(access_time[ACCSTR:0]) begin
mux_1 = (access_time[REFNUM:0] > access_time[3:2]) ?
  access_time[3:2] : access_time [REFNUM:0] ;
mux_2 = (access_time[5:4] > access_time[ACCSTR:6]) ?
  access_time[ACCSTR:6]:access_time [5:4] ;
mux_3 = (access_time[REFNUM:0] > access_time[3:2]) ? 2'b01 : 2'b00 ;
mux_4 = (access_time[5:4] > access_time[ACCSTR:6]) ? 2'b11 : 2'b10 ;
min_id = (mux_1 > mux_2) ? mux_4 : mux_3 ;
end

//timing issue
always @(min_id or 
new_buf_req or 
buf_replc) begin
next_replc = (new_buf_req == 1'b1) ? min_id:buf_replc ;
end

// Flipflop output for find_min id logic
always @(posedge clk or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        buf_replc <= #INTL_DELAY 2'b00;
    end
    else begin
        buf_replc <= #INTL_DELAY next_replc ;
    end
end

// Final output
assign buf_num_replc = buf_replc ;

endmodule


// +HC -------------------------------------------------
// File : testbench.v
// Module : testbench
// Function : LFU algorithm testing
// ------------------------------------------------------
// History: 
// Version Date Author Description
// v1.0 23.April.2018 Van Le Original
// ------------------------------------------------------
// (C) Copyright 2004 Renesas Technology Corp. All rights reserved.
// -HC --------------------------------------------------

// include design file
`include "dut.v"

module testbench;

// Parameter constant
parameter HF_CYCL = 5;
parameter CYCL = HF_CYCL *2;

// Signal definition 
reg clk, rst_n;
reg new_buf_req;
reg [1:0] ref_buf_numbr;
wire [1:0] buf_num_replc;

// Port map to module exercise1
lfu_algorithm lfu_algorithm_01( .clk(clk), .rst_n(rst_n), .new_buf_req(new_buf_req),
 .ref_buf_numbr(ref_buf_numbr), .buf_num_replc(buf_num_replc) );

// Clock generator
always begin
clk = 1'b0; # HF_CYCL;
clk = 1'b1; #HF_CYCL;
end

// Motitor all of signals
always @(posedge clk) begin
$strobe("t =%d, rst_n=%b, new_buf_req = %b, ref_buf_numbr = %d, buf_num_replc = %d, access_time = %d_%d_%d_%d",
        $stime, rst_n, new_buf_req, ref_buf_numbr, buf_num_replc,
        lfu_algorithm_01.access_time[7:6],
        lfu_algorithm_01.access_time[5:4],
        lfu_algorithm_01.access_time[3:2],
        lfu_algorithm_01.access_time[1:0] );
end

// test case
initial begin
// value at 0
rst_n = 1'b0 ;
new_buf_req = 1'b0 ;
ref_buf_numbr = 1'b0 ;
$display ("##########################################################");
$display ("all signals are set to initial values");

// when reset
#(CYCL) new_buf_req = 1'b1 ;
$display ("##########################################################");
$display ("new_buf_req is actice, but reset signal is low, then the module donot start");

#(CYCL) new_buf_req = 1'b0 ;
        ref_buf_numbr = 2'b01 ;
$display ("##########################################################");
$display ("buffer 1 is refered, but reset signal is low, then the module donot start");

//when module oparate
#(CYCL) rst_n = 1'b1 ;
        ref_buf_numbr = 2'b00 ;
$display ("##########################################################");
$display ("reset signal is high, then module run, buffer 0 is refered in next cycle");
    
#(CYCL) ref_buf_numbr = 2'b11 ;
$display ("##########################################################");
$display ("buffer 3 is refered in next cycle");

#(CYCL) ref_buf_numbr = 2'b11 ;
$display ("##########################################################");
$display ("buffer 3 is max in next cycle");

#(CYCL) ref_buf_numbr = 2'b10 ;
$display ("##########################################################");
$display ("buffer 2 is refered in next cycle");

#(CYCL) ref_buf_numbr = 2'b10 ;
$display ("##########################################################");
$display ("buffer 2 is max in next cycle");

#(CYCL) ref_buf_numbr = 2'b01 ;
$display ("##########################################################");
$display ("buffer 1 is refered in next cycle");

#(CYCL) ref_buf_numbr = 2'b01 ;
$display ("##########################################################");
$display ("buffer 1 is max in next cycle");

#(CYCL) ref_buf_numbr = 2'b00 ;
$display ("##########################################################");
$display ("buffer 0 is max in next cycle");

#(CYCL) new_buf_req = 1'b1 ;
        ref_buf_numbr = 2'b01 ;
$display ("##########################################################");
$display ("when all buffer are max, new_buf_req is actice, then buffer 0 is reset to 01 in next cycle");

#(CYCL) new_buf_req = 1'b0 ;
        ref_buf_numbr = 2'b00 ;
$display ("##########################################################");
$display ("buffer 0 is refered in next cycle");

#(CYCL) ref_buf_numbr = 2'b00 ;
$display ("##########################################################");
$display ("buffer 0 is max in next cycle");

#(CYCL) ref_buf_numbr = 2'b00 ;
$display ("##########################################################");
$display ("when all buffers are max, buffer 0 is refered") ;
$display ("all buffers are reset to 1, and buffer 0 is refered to 2 in next cycle") ;

#(CYCL) new_buf_req = 1'b1 ;
          ref_buf_numbr = 2'b01 ;
$display ("##########################################################");
$display ("new_buf_req is active, buf_num_replc is buffer 1 in next cycle");

#(CYCL) new_buf_req = 1'b0 ;
$display ("##########################################################");
$display ("buffer 1 is refered to 2 in next cycle");

#(CYCL) new_buf_req = 1'b1 ;
$display ("##########################################################");
$display ("new_buf_req is active, buf_num_replc is buffer 2 in next cycle");

#(CYCL) new_buf_req = 1'b0 ;
        ref_buf_numbr = 2'b10 ;
$display ("##########################################################");
$display ("buffer 2 is refered to 2 in next cycle");
    
#(CYCL) new_buf_req = 1'b1 ;
        ref_buf_numbr = 2'b11 ;
$display ("##########################################################");
$display ("new_buf_req is active, buf_num_replc is buffer 3 in next cycle");

#(CYCL) new_buf_req = 1'b0 ;
        ref_buf_numbr = 2'b01 ;
$display ("##########################################################");
$display ("buffer 1 is refered to 3 in next cycle");      
  
#(CYCL) new_buf_req = 1'b1 ;
$display ("##########################################################");
$display ("new_buf_req is active, buf_num_replc is buffer 3 in next cycle");

#(CYCL) new_buf_req = 1'b0 ;
        ref_buf_numbr = 2'b11 ;
$display ("##########################################################");
$display ("buffer 3 is refered to 2 in next cycle"); 

#(CYCL) new_buf_req = 1'b1 ;
        ref_buf_numbr = 2'b00 ;
$display ("##########################################################");
$display ("new_buf_req is active, buf_num_replc is buffer 0 in next cycle");
       
#(CYCL) new_buf_req = 1'b0 ; 
$display ("##########################################################");   
$display ("buffer 0 is refered to 2 in next cycle"); 

#(CYCL) $display ("##########################################################");
#(CYCL)$finish ;
end

endmodule
